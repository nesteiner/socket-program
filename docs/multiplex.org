* 多路复用程序设计，以Poll举例
** 注册
先注册 *服务端套接字*
#+BEGIN_SRC c++
  // init the pollfds
  events[0].fd = listen_fd;
  events[0].events = POLLIN;
  for (int index = 1; index < INIT_SIZE; index += 1) {
    events[index].fd = -1;
  }

#+END_SRC
** 轮询
进入 *while* 循环
#+BEGIN_SRC c++
  while (true) {
    count += 1;
    int ready_number = poll(events, INIT_SIZE, -1);
    if (ready_number < 0) {
      perror("error in poll");
      exit(0);
    }

    ...

   }
#+END_SRC
** 处理
在 *while* 循环中
先处理 *服务端套接字*
#+BEGIN_SRC c++
  if (events[0].revents & POLLIN) {
    int connfd = tcp::accept(listen_fd);
    if(connfd < 0) {
      continue;
    }
      
    for (index = 1; index < INIT_SIZE; index += 1) {
      if (events[index].fd < 0) {
        events[index].fd = connfd;
        events[index].events = POLLIN;
        break;
      }
    }

    if (index == INIT_SIZE) {
      std::cerr << "too many connection" << endl;
      exit(0);
    }
   }

#+END_SRC

再处理 *负责对端数据读写的套接字*
#+BEGIN_SRC c++
  for (index = 1; index < INIT_SIZE; index += 1) {
    int connfd = events[index].fd;
    if (connfd > 0) {
      if (events[index].revents & POLLIN) {
        int result = tcp::recv(connfd, buffer, MAXLINE, 0);
        if (result > 0) {
          tcp::send(connfd, response, strlen(response), 0);
        } else if (result <= 0) {
          tcp::shutdown(connfd, 2);
          events[index].fd = -1;
        }
      }
    }
  }
#+END_SRC
** 实例
#+BEGIN_SRC c++
  int main() {
    int listen_fd = tcp::server("0.0.0.0", 9999);
    tcp::make_nonblocking(listen_fd);
    int index;
    struct pollfd events[INIT_SIZE];
    char buffer[MAXLINE];
    memset(buffer, 0, MAXLINE);

    // init the pollfds
    events[0].fd = listen_fd;
    events[0].events = POLLIN;
    for (int index = 1; index < INIT_SIZE; index += 1) {
      events[index].fd = -1;
    }

    int count = 1;
    while (true) {
      count += 1;
      int ready_number = poll(events, INIT_SIZE, -1);
      if (ready_number < 0) {
        perror("error in poll");
        exit(0);
      }

      // first check the listenfd
      if (events[0].revents & POLLIN) {
        int connfd = tcp::accept(listen_fd);
        if (connfd == -1) {
          if (errno == EWOULDBLOCK) {
            std::cerr << "no connections so far" << endl;
          } else {
            perror("error in accept");
            exit(0);
          }
        }

        for (index = 1; index < INIT_SIZE; index += 1) {
          if (events[index].fd < 0) {
            tcp::make_nonblocking(connfd);
            events[index].fd = connfd;
            events[index].events = POLLIN;
            break;
          }
        }

        if (index == INIT_SIZE) {
          std::cerr << "too many connection" << endl;
          exit(0);
        }
      }
      // and then check another event
      for (index = 1; index < INIT_SIZE; index += 1) {
        int connfd = events[index].fd;
        if (connfd < 0) {
          continue;
        }
      
        if (events[index].revents & POLLIN) {
          int result = tcp::recv(connfd, buffer, MAXLINE, 0);
          if (result > 0) {
            // STUB echo
            cout << "i -> o" << endl;
            events[index].events = POLLOUT;
          } else if (result == 0) {
            tcp::shutdown(connfd, 2);
            events[index].fd = -1;
          } else if (result < 0) {
            if (errno == EAGAIN) {
              continue;
            } else {
              perror("error in recv");
              events[index].fd = -1;
              tcp::shutdown(connfd, 2);
            }
          }
        } else if (events[index].revents & POLLOUT) {
          int result = tcp::send(connfd, response, strlen(response), 0);
	
          if(result > 0) {
            // STUB
            cout << "o -> i" << endl;
            events[index].events = POLLIN;
          } else if(result <= 0) {
            perror("error in send");
            events[index].fd = -1;
          }
        }
      }
    }

    tcp::shutdown(listen_fd, 2);
    return 0;
  }

#+END_SRC
** 疑问
+ 如何判断超时事件
+ 没有制定协议来规定什么时候关闭对端套接字


* 非阻塞程序
** 读
*一直读，直到返回0， 或者 -1 & errno == EAGAIN*
TODO image 
+ 返回读取字节数
+ 返回-1， 设置errno为EAGAIN
+ 返回读取字节数


** 写
*一直写，直到写完数据， 或者 -1 & errno == EAGAIN*
TODO image
+ 返回写入字节数
+ 返回 -1， 设置errnor为EAGAIN
+ 返回写入字节数

** 错误事件

** 实例
阻塞读写会等待缓存区有空余位置，一直到数据读写完毕
#+BEGIN_SRC c++
  while(result > 0) {
    result = tcp::recv(connfd, buffer, MAXLINE, 0);
  }
  tcp::shutdown(connfd, 2);
#+END_SRC

如果是阻塞写，记得判断数据是否被写完

** 疑问
+ 是否需要为非阻塞程序引入 /buffer/ 结构，处理读写数据
 

* 多路复用 与 非阻塞
考虑到非阻塞读写的返回值与缓冲区是否有空余位置相关，
#+BEGIN_SRC c++
  result = tcp::recv(connfd, buffer, MAXLINE, 0);
  while(result > 0) {
    result = tcp::recv(connfd, buffer, MAXLINE, 0);
    // TODO handler the buffer, 
   }

  if(result == 0) {
    // TODO modify the event and wait for next loop
    event.data.fd = connfd;
    event.events  = EPOLLOUT;

    epoll_ctl(efd, EPOLL_CTL_MOD, connfd, &event);

   } else if(result == -1 && errno == EAGAIN) {
    // ATTENTION 只需等到下次循环再读就可以了
    // PASS
   } else {
    // ATTENTION error occusin in this connfd
    epoll_ctl(efd, EPOLL_CTL_DEL, connfd, NULL);
    tcp::shutdown(connfd, 2);
   }

#+END_SRC

这是写的步骤， __可能要考虑引入 `buffer` 对象__
代码为 ` buffer -> data_size = left` 
#+BEGIN_SRC c++
  int nwrite, data_size = response_size;
  int left = data_size;
  int offset;
	
  while(left > 0) {
    offset = data_size - left;
    nwrite = tcp::send(connfd, response + offset, left, 0);
    if(nwrite < left) {
      // EAGAIN occusin or something else, need to break
      if(nwrite == -1 && errno != EAGAIN) {
        perror("write error");
        tcp::shutdown(connnfd, 2);
      }

      break;
    }

    left -= nwrite;
   }
	
#+END_SRC


