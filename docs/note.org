* event_loop
#+BEGIN_SRC c++
  struct event_loop {
    int quit;
    const struct event_dispatcher *eventDispatcher;

    /** 对应的event_dispatcher的数据. */
    void *event_dispatcher_data;
    struct channel_map *channelMap;

    int is_handle_pending;
    struct channel_element *pending_head;
    struct channel_element *pending_tail;

    pthread_t owner_thread_id;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    int socketPair[2];
    char *thread_name;
  };
#+END_SRC

*channel_element* 他娘的就是个链表，改个名字好不好
#+BEGIN_SRC c++
  struct channel_element {
    int type; //1: add  2: delete
    struct channel *channel;
    struct channel_element *next;
  };
#+END_SRC
** event_loop_run
#+BEGIN_SRC c++
  /**
   ,*
   ,* 1.参数验证
   ,* 2.调用dispatcher来进行事件分发,分发完回调事件处理函数
   ,*/
  int event_loop_run(struct event_loop *eventLoop) {
    assert(eventLoop != NULL);

    struct event_dispatcher *dispatcher = eventLoop->eventDispatcher;

    if (eventLoop->owner_thread_id != pthread_self()) {
      exit(1);
    }

    yolanda_msgx("event loop run, %s", eventLoop->thread_name);
    struct timeval timeval;
    timeval.tv_sec = 1;

    while (!eventLoop->quit) {
      //block here to wait I/O event, and get active channels
      dispatcher->dispatch(eventLoop, &timeval);

      //handle the pending channel
      event_loop_handle_pending_channel(eventLoop);
    }

    yolanda_msgx("event loop end, %s", eventLoop->thread_name);
    return 0;
  }
#+END_SRC

** event_dispatcher
为了实现不同的事件分发机制，这里把 poll、epoll 等抽象成了一个 event_dispatcher 结构。
#+BEGIN_SRC c++
  /** 抽象的event_dispatcher结构体，对应的实现如select,poll,epoll等I/O复用. */
  struct event_dispatcher {
    /**  对应实现 */
    const char *name;

    /**  初始化函数 */
    void *(*init)(struct event_loop * eventLoop);

    /** 通知dispatcher新增一个channel事件*/
    int (*add)(struct event_loop * eventLoop, struct channel * channel);

    /** 通知dispatcher删除一个channel事件*/
    int (*del)(struct event_loop * eventLoop, struct channel * channel);

    /** 通知dispatcher更新channel对应的事件*/
    int (*update)(struct event_loop * eventLoop, struct channel * channel);

    /** 实现事件分发，然后调用event_loop的event_activate方法执行callback*/
    int (*dispatch)(struct event_loop * eventLoop, struct timeval *);

    /** 清除数据 */
    void (*clear)(struct event_loop * eventLoop);
  };
#+END_SRC

* Channel 我觉得是反应炉，放进去，然后查看
*channel* 对象是用来和 *event_dispather* 进行交互的最主要的结构体，它抽象了事件分发
一个 channel 对应一个描述字，描述字上可以有 READ 可读事件，也可以有 WRITE 可写事件。
*channel* 对象绑定了事件处理函数 *event_read_callback* 和 *event_write_callback* 。
#+BEGIN_SRC c++
  typedef int (*event_read_callback)(void *data);
  typedef int (*event_write_callback)(void *data);

  struct channel {
    int fd;
    int events;   //表示event类型

    event_read_callback eventReadCallback;
    event_write_callback eventWriteCallback;
    void *data; //callback data, 可能是event_loop，也可能是tcp_server或者tcp_connection
  };
#+END_SRC

** Channel Map
event_dispatcher 在获得活动事件列表之后，需要通过文件描述字找到对应的 channel，从而回调 channel 上的事件处理函数 event_read_callback 和 event_write_callback，为此，设计了 channel_map 对象。
#+BEGIN_SRC c++
  /**
  * channel映射表, key为对应的socket描述字
  */
  struct channel_map {
    void **entries;

    /* The number of entries available in entries */
    int nentries;
  };
#+END_SRC

比如描述字 3 对应的 channel，就可以这样直接得到。
#+BEGIN_SRC c++
  struct chanenl * channel = map->entries[3];
#+END_SRC


* Source Code of Yolanda

